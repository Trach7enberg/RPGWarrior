// Garrett Gan All Right Reserved

#pragma once

#include "CoreMinimal.h"
#include "NativeGameplayTags.h"

namespace WarriorGameplayTags
{
#pragma region InputTag
	/// RPGWARRIOR_API宏,允许这个标签可以被其他模块使用
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_Move);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_Look);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_Equip);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_UnEquip);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_LightAttack);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_HeavyAttack);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_Block);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_TargetLock);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_SwitchTarget_Left);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_SwitchTarget_Right);

	/// 八方向滚动输入
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(InpuTag_Roll);
#pragma endregion

#pragma region WeaponTag
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Weapon_WarriorAxe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Weapon_Grunting_1);

#pragma endregion

	// 通过能力触发的Event
#pragma region EventTag

	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_Equip_Axe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_UnEquip_Axe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_MeleeHit);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_HitPause);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_HitReact);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_Death);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_SuccessfulBlock);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_SwitchLockTarget_Left);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_EventTag_SwitchLockTarget_Right);

	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_EventTag_HitReact);
	/// 敌人死亡时会被授予的标签
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_EventTag_Death);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_EventTag_MeleeHit);
	/// 敌人侧走模式事件
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_EventTag_Strafing);

#pragma endregion

#pragma region AbilityTag
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Equip_Axe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_UnEquip_Axe);

	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Attack_Light_Axe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Attack_Heavy_Axe);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Block_Shield);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitPause);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitReact);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitReact_Front);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitReact_Left);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitReact_Right);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_HitReact_Back);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Death);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_Roll);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Ability_TargetLock);

	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_Melee);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_Ranged);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_HitReact);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_HitReact_Front);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_HitReact_Left);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_HitReact_Right);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_HitReact_Back);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Ability_Death);
#pragma endregion

#pragma region AbilityStatusTag

	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Status_Attack_JumpToFinisher);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Status_Rolling);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Status_Blocking);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Player_Status_TargetLocking);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Enemy_Status_UnderAttack);

#pragma endregion

#pragma region SetByCallerTag
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Shared_SetByCaller_BaseDamage);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Shared_SetByCaller_AttackType_Light);
	RPGWARRIOR_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(Shared_SetByCaller_AttackType_Heavy);
#pragma endregion
}
